#Snakefile for Dropseq analysis based on a fixed (i.e. not automatically inferred) number of cells

import glob
import os

#Scripts
scripts = config["scripts"]

#whitelist
whitelist = config["whitelist"]

#genome_index
HumanGenomeIndex = config["human_genome_index"]
ChimpGenomeIndex = config["chimp_genome_index"]

pd = config["proj_dir"]
fastq_dir = pd + "fastq/"
fastqc_dir = pd + "fastqc/"
reports = pd + "reports/"

# Directory to send log files. Needs to be created manually since it
# is not a file created by a Snakemake rule.
dir_log = config["dir_log"]
if not os.path.isdir(dir_log):
    os.mkdir(dir_log)
    
samples = set(glob_wildcards(fastq_dir + "{samples}_R1_001.fastq.gz").samples)
read_num = ['1','2']

localrules: make_report, index_bam_human, index_bam_chimp

rule all:
    input:
        expand(fastqc_dir + "{sample}_R1_001_fastqc.zip", sample = samples),
        expand(fastqc_dir + "{sample}_R2_001_fastqc.zip", sample = samples),
        expand(pd + "{sample}_human/Aligned.out.bam", sample = samples),  
        expand(pd + "{sample}_human/Aligned.sortedByName.out.bam", sample = samples),  
        expand(pd + "{sample}_human/Aligned.sortedByCoord.out.bam", sample = samples),
        expand(pd + "{sample}_human/Aligned.sortedByCoord.out.bam.bai", sample = samples),
        expand(pd + "{sample}_chimp/Aligned.out.bam", sample = samples),
        expand(pd + "{sample}_chimp/Aligned.sortedByName.out.bam", sample = samples),
        expand(pd + "{sample}_chimp/Aligned.sortedByCoord.out.bam", sample = samples),
        expand(pd + "{sample}_chimp/Aligned.sortedByCoord.out.bam.bai", sample = samples),
        expand(pd + "{sample}/species.tsv", sample = samples),
        expand(reports + "{sample}/{sample}_pipeline_report.html", sample = samples)

#fastqc will be run on both input files
rule fastqc:
    input:
        fastq_dir + "{sample}_R{read_num}_001.fastq.gz"
    output:
        fastqc_dir + "{sample}_R{read_num}_001_fastqc.html",
        fastqc_dir + "{sample}_R{read_num}_001_fastqc.zip"
    params:
        outdir = fastqc_dir
    shell:
        "fastqc -o {params.outdir} {input}"
        
rule unzip_whitelist:
    input:
        whitelist
    output:
        pd + "barcodes_for_star.txt"
    shell:
        "gunzip -c {input} > {output}"

rule align_human:
    input:
        cDNA_read = fastq_dir + "{sample}_R2_001.fastq.gz",
        bc_read = fastq_dir + "{sample}_R1_001.fastq.gz", 
        ref_genome = HumanGenomeIndex,
        whitelist = pd + "barcodes_for_star.txt"
    output:
        bam      = pd + "{sample}_human/Aligned.sortedByCoord.out.bam",
        unsorted = pd + "{sample}_human/Aligned.out.bam"
    params:
        tmpdir = "_STARtmp_human_{sample}",
        prefix =  "{sample}_human/",
        CBstart = 1,
        CBlen = 16,
        UMIstart = 17,
        UMIlen = 12,
        multimap = 1,
        threads = 8,
        strand = "Forward"
    shell:
        """
        STAR --runThreadN {params.threads} \
--genomeDir {input.ref_genome} \
--soloUMIfiltering MultiGeneUMI \
--soloCBmatchWLtype 1MM_multi_pseudocounts \
--outSAMtype BAM Unsorted SortedByCoordinate \
--outSAMattributes NH HI AS nM CR CY UR UY CB UB \
--outStd BAM_SortedByCoordinate \
--soloType CB_UMI_Simple \
--soloCBwhitelist {input.whitelist} \
--soloCBstart {params.CBstart} \
--soloCBlen {params.CBlen} \
--soloUMIstart {params.UMIstart} \
--soloUMIlen {params.UMIlen} \
--soloStrand {params.strand} \
--soloFeatures Gene GeneFull \
--soloUMIdedup 1MM_Directional \
--outFileNamePrefix {params.prefix} \
--soloOutFileNames ./ "genes.tsv" "barcodes.tsv" "matrix.mtx" "matrixGeneFull.mtx" \
--readFilesIn {input.cDNA_read} {input.bc_read} \
--readFilesCommand zcat \
--outTmpDir {params.tmpdir} \
--outSAMunmapped Within \
--outFilterMultimapNmax {params.multimap} \
--limitBAMsortRAM 48000000000 > {output.bam}
        """
        
rule align_chimp:
    input:
        cDNA_read = fastq_dir + "{sample}_R2_001.fastq.gz",
        bc_read = fastq_dir + "{sample}_R1_001.fastq.gz",
        ref_genome = ChimpGenomeIndex,
        whitelist = pd + "barcodes_for_star.txt"
    output:
        bam      =  pd + "{sample}_chimp/Aligned.sortedByCoord.out.bam",
        unsorted =  pd + "{sample}_chimp/Aligned.out.bam"
    params:
        tmpdir = "_STARtmp_chimp_{sample}",
        prefix = "{sample}_chimp/",
        CBstart = 1,
        CBlen = 16,
        UMIstart = 17,
        UMIlen = 12,
        multimap = 1,
        threads = 8,
        strand = "Forward"
    shell:
        """
        STAR --runThreadN {params.threads} \
--genomeDir {input.ref_genome} \
--soloUMIfiltering MultiGeneUMI \
--soloCBmatchWLtype 1MM_multi_pseudocounts \
--outSAMtype BAM Unsorted SortedByCoordinate \
--outSAMattributes NH HI AS nM CR CY UR UY CB UB \
--outStd BAM_SortedByCoordinate \
--soloType CB_UMI_Simple \
--soloCBwhitelist {input.whitelist} \
--soloCBstart {params.CBstart} \
--soloCBlen {params.CBlen} \
--soloUMIstart {params.UMIstart} \
--soloUMIlen {params.UMIlen} \
--soloStrand {params.strand} \
--soloFeatures Gene GeneFull \
--soloUMIdedup 1MM_Directional \
--outFileNamePrefix {params.prefix} \
--soloOutFileNames ./ "genes.tsv" "barcodes.tsv" "matrix.mtx" "matrixGeneFull.mtx" \
--readFilesIn {input.cDNA_read} {input.bc_read} \
--readFilesCommand zcat \
--outTmpDir {params.tmpdir} \
--outSAMunmapped Within \
--outFilterMultimapNmax {params.multimap} \
--limitBAMsortRAM 48000000000 > {output.bam}
        """

rule index_bam_human:
    input:
        pd + "{sample}_human/Aligned.sortedByCoord.out.bam"
    output:
        pd + "{sample}_human/Aligned.sortedByCoord.out.bam.bai"
    shell:
        "samtools index {input}"

rule index_bam_chimp:
    input:
        pd + "{sample}_chimp/Aligned.sortedByCoord.out.bam"
    output:
        pd + "{sample}_chimp/Aligned.sortedByCoord.out.bam.bai"
    shell:
        "samtools index {input}"
        
# assign species

rule sort_bam_human:
    input:
        pd + "{sample}_human/Aligned.out.bam"
    output:
        pd + "{sample}_human/Aligned.sortedByName.out.bam"
    shell:
        "samtools sort -n -o {output} -O bam {input}"
        
rule sort_bam_chimp:
    input:
        pd +"{sample}_chimp/Aligned.out.bam"
    output:
        pd + "{sample}_chimp/Aligned.sortedByName.out.bam"
    shell:
        "samtools sort -n -o {output} -O bam {input}"
        
rule assign_species:
    input:
         human = pd + "{sample}_human/Aligned.sortedByName.out.bam",
         chimp = pd + "{sample}_chimp/Aligned.sortedByName.out.bam"
    output:
         pd + "{sample}/species.tsv"
    shell:
        """
        python {scripts}assign_species.py {input.human} {input.chimp} {output}
        """

rule make_report:
     input:
         pd + "{sample}_human/Aligned.sortedByName.out.bam"
     output:
         reports + "{sample}/{sample}_pipeline_report.html"
     shell:
         """ R -e "rmarkdown::render(input = '{scripts}species_mixing_report.Rmd', knit_root_dir='{pd}', output_file='{output}', intermediates_dir='{reports}{wildcards.sample}/', params=list(sampleID='{wildcards.sample}'))" """

  


